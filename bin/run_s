#!/bin/bash

err_echo() {
	echo "$@" >&2
}

usage() {
	err_echo "Usage: gen <testcase name>"
	exit 1
}

if [[ $# -lt 1 ]]; then
	usage
fi

# Ensure an argument is provided
if [[ -z "$1" ]]; then
	echo "Usage: run_s <filename (without .cpp)> [optional flags]" >&2
	exit 1
fi

filename="$1.cpp"
output="$1"
failed=0
total=0

# Check if the file exists
if [[ ! -f "$filename" ]]; then
	echo "Error: File '$filename' not found!" >&2
	exit 1
fi

todo_lines=$(grep -n "TODO" "$filename" | sed 's/^[0-9]*: *//')
if [[ -n "$todo_lines" ]]; then
	echo "$todo_lines" >&2
	echo -e "\e[31mWarning:\e[0m still found in ${filename}." >&2
	echo "" >&2
fi

extra_flags=""
for arg in "${@:2}"; do
	extra_flags="$extra_flags $arg"
done

# Compile and run
g++ -std=c++20 -O2 -Wall -Wextra -o "$output" "$filename" $extra_flags

# Run only if compilation was successful
if [[ $? -eq 0 ]]; then
	# Loop through all .in files with the specified prefix
	for input_file in $output*.in; do
		if [[ -f "$input_file" ]]; then
			output_file="${input_file%.in}.out"

			((total++))

			if [[ ! -f "$output_file" ]]; then
				echo -e "\e[31mExpected $output_file for $input_file not found. Skipping.\e[0m" >&2
				((failed++))
				continue
			fi

			# Run the program and capture its output
			program_output=$(./"$output" <"$input_file" 2>/dev/null)
			expected_output=$(cat "$output_file")

			if [[ "$program_output" != "$expected_output" ]]; then
				echo "------------------------------------" >&2
				echo "Test failed for $input_file!" >&2
				echo "----------" >&2
				echo "Expected:" >&2
				echo "$expected_output" >&2
				echo "----------" >&2
				echo "Got:" >&2
				echo "$program_output" >&2
				echo "------------------------------------" >&2
				((failed++))
			fi
		fi
	done

	echo "" >&2
	if ((failed == 0)); then
		echo -e "\e[1m\e[32mAll tests passed.\e[0m" >&2
	else
		echo -e "\e[1m\e[31m$(($total - $failed)) / $total tests passed.\e[0m" >&2
	fi
else
	echo "Compilation failed!" >&2
	exit 1
fi
