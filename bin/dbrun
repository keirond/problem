#!/bin/bash

err_echo() {
	echo "$@" >&2
}

usage() {
	err_echo "Usage: $0 [OPTIONS] <source_file (without .cpp)> [FLAGS]"
	err_echo ""
	err_echo "Options:"
	err_echo "  -t, --time      Measure and display the runtime"
	err_echo "  -g, --gdb       Run with GNU Debugger"
	err_echo "  -d, --debug     Enable -DDEBUG macro"
	err_echo ""
	err_echo "Flags:"
	err_echo "  Any additional flags will be passed directly to g++ compilation."
	err_echo "  Example: $0 program -lcurl -pthread"
	exit 1
}

compile() {
	local _compile_options="-std=c++20"
	local _warning_flags=("-Wall" "-Wextra")
	local _optimization_flags="-O2"
	# local _debugging_options="-g"
	# local _preprocessor_defines="-DDEBUG"
	# local _include_paths=""
	# local _libraries=""
	local _extra_flags=("${@:3}")
	local _source_file="$1"
	local _output_file="$2"

	if [[ -z "$_source_file" ]]; then
		err_echo "Error: No source file provided!"
		exit 1
	fi

	if [[ "$_source_file" == ".cpp" || "$_source_file" != *.cpp || ! -f "$_source_file" ]]; then
		err_echo "Error: File '$_source_file' is invalid!"
		exit 1
	fi

	if [[ -z "$_output_file" ]]; then
		err_echo "Error: No output file provided!"
		exit 1
	fi

	check_todo "$_source_file"

	err_echo "Compiling $_source_file with C++20."

	# "$_debugging_options" $_preprocessor_defines "$_include_paths" "$_libraries"
	if g++ "$_compile_options" "${_warning_flags[@]}" "$_optimization_flags" \
	   "${_extra_flags[@]}" "$_source_file" -o "$_output_file"; then
		echo "$_output_file"
	else
		err_echo "Error: Compilation failed!"
		exit 1
	fi
}

check_todo() {
	local _source_file="$1"
	local _todo_lines

	_todo_lines=$(grep "TODO" "$_source_file" 2>/dev/null)
	if [[ -n "$_todo_lines" ]]; then
		err_echo -e "\e[31mWarning:\e[0m TODOs found in '$_source_file':"
		err_echo "$_todo_lines"
		err_echo ""
	fi
}

run() {
	local _output_file="$1"
	shift
	local _commands=("$@")

	if [[ -z "$_output_file" ]]; then
		err_echo "Error: No output file provided!"
		exit 1
	fi

	if [[ ${#_commands[@]} -eq 0 ]]; then
		"./$_output_file"
	else
		"${_commands[@]}" "./$_output_file"
	fi
}

commands=()
flags=()

while [[ $# -gt 0 && $1 == -* ]]; do
	case "$1" in
	-d | --debug)
		flags+=("-DDEBUG")
		shift
		;;
	-g | --gdb)
		flags+=("-g")
		commands+=("gdb --args")
		shift
		;;
	-t | --time)
		commands+=("time")
		shift
		;;
	*)
		err_echo "Error: Unknown option '$1'!"
		usage
		;;
	esac
done

if [[ $# -lt 1 ]]; then
	usage
fi

source_file="$1.cpp"
output_file="$1"
shift

compiled_file=$(compile "$source_file" "$output_file" "${flags[@]}" "$@")
run "$compiled_file" "${commands[@]}"
